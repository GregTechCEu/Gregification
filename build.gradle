import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

plugins {
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'wtf.gofancy.fancygradle' version "${fancy_gradle_version}"
}

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = project.maven_group
archivesBaseName = "${project.archives_base_name}-${project.minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

if (project.use_intellij_idea.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'idea'
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

if (project.use_eclipse.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'eclipse'
    }

    eclipse {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

minecraft {
    mappings channel: "${mcp_mappings_channel}", version: "${mcp_mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/gregification_at.cfg')

    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            jvmArg '-Dmixin.hotSwap=true'
            jvmArg '-Dmixin.checks.interfaces=true'
            jvmArg '-Dmixin.debug=true'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', minecraft_version.toString()
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            jvmArg '-Dmixin.hotSwap=true'
            jvmArg '-Dmixin.checks.interfaces=true'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', minecraft_version.toString()
        }
    }
}

repositories {
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        // JEI
        name 'Progwml6 Maven'
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        // CraftTweaker and JEI Backup
        name 'BlameJared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'Curse Maven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'Sponge Maven'
        url 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Hard-Deps
    implementation fg.deobf("curse.maven:gregtech-ce-unofficial-${project.gt_id}:${project.gt_version}")
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-242818:2779848")
    implementation fg.deobf("curse.maven:mixin-booter-419286:4090558")

    // Useful stuff
    implementation "mezz.jei:jei_1.12.2:4.16.1.302"
    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${project.ct_version}"
    implementation files("libs/groovyscript-0.4.0.jar")
    implementation fg.deobf("curse.maven:the-one-probe-245211:2667280")

    // Direct compat mods
    // Must be present in-dev as their code is referenced in this mod
    implementation fg.deobf("curse.maven:ctm-267602:2915363")
    implementation fg.deobf("curse.maven:forestry-59751:2918418")
    implementation fg.deobf("curse.maven:tinkers-construct-74072:2902483")
    implementation fg.deobf("curse.maven:mantle-74924:2713386")
    implementation fg.deobf("curse.maven:shadowfacts-forgelin-248453:2785465")
    implementation fg.deobf("curse.maven:ex-nihilo-creatio-274456:2817545")
    implementation fg.deobf("curse.maven:opencomputers-223008:2828357")
    implementation fg.deobf("curse.maven:tfcraft-302973:3268988")
    implementation fg.deobf("curse.maven:ae2-extended-life-570458:4323863")
    implementation fg.deobf("curse.maven:gregtech-food-option-${project.gtfo_id}:${project.gtfo_version}")
    implementation fg.deobf("curse.maven:cc-tweaked-282001:2718128")

    // May get some form of compatibility in the future
    //implementation fg.deobf("curse.maven:mcjtylib-233105:2745846")
    //implementation fg.deobf("curse.maven:xnet-260912:2745852")

    // Addons and other mods
    // Enable for testing as needed
    //implementation fg.deobf("curse.maven:binnies-mods-223525:2916129")
    //implementation fg.deobf("curse.maven:magic-bees-65764:2566282")
    //implementation fg.deobf("curse.maven:gendustry-70492:2516215")
    //implementation fg.deobf("curse.maven:bdlib-70496:2518031")
    //implementation fg.deobf("curse.maven:career-bees-281791:2534481")
    //implementation fg.deobf("curse.maven:retrobees-300139:2934369")
    //implementation fg.deobf("curse.maven:the-twilight-forest-227639:3051450")
    //implementation fg.deobf("curse.maven:thaumcraft-223628:2629023")
    //implementation fg.deobf("curse.maven:baubles-227083:2518667")
    //implementation fg.deobf("curse.maven:biomes-o-plenty-220318:2715506")
    //implementation fg.deobf("curse.maven:extra-utilities-225561:2678374")

    // Mixin related things
    compileOnly "zone.rong:mixinbooter:${project.mixinbooter_version}"
    runtimeOnly "zone.rong:mixinbooter:${project.mixinbooter_version}"
    annotationProcessor "org.spongepowered:mixin:${project.mixin_annotations_version}:processor"
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
    }
}

processJarTask jar

def final is_ci_env = providers.environmentVariable('CI').getOrElse('false').toBoolean()

if (is_ci_env || project.build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    tasks.register('deobfJar', Jar) {
        archiveClassifier.set 'deobf'
        from sourceSets.main.output
    }
    processJarTask deobfJar
}

if (is_ci_env || project.build_apiJar.toBoolean()) {
    // Create API library jar
    tasks.register('apiJar', Jar) {
        archiveClassifier.set 'api'
        from(sourceSets.main.java) {
            include 'gregification/api/**'
        }

        from(sourceSets.main.output) {
            include 'gregification/api/**'
        }
    }
}

if (is_ci_env || project.build_sourceJar.toBoolean()) {
    // Create source jar
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allJava
    }
}

// Loading resources, works even on IDE client runs
sourceSets {
    main {
        ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'

        java {
            srcDirs = ['src/main/java', 'src/api/java']
        }

        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.classesDirectory)
}

artifacts {
    if (is_ci_env || project.build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (is_ci_env || project.build_apiJar.toBoolean()) {
        archives apiJar
    }
    if (is_ci_env || project.build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

// It is important to NOT re-obfuscate jars for the deobfuscated environment.
// Therefore, we do not finalize the 'jar' task with the 'reobfJar' task.
// The Forge FG5 example buildscript states otherwise, however it creates broken builds in deobfuscated environments.

processResources {
    // required to allow file expansion later
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'mcversion', minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand(['version': version, 'mcversion': minecraft_version])
    }

    // copy everything else except mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

test {
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.PASSED, TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showStackTraces true
        showCauses true
        showStandardStreams true
    }

    useJUnitPlatform()
}

/**
 * Applies required processing to jar tasks
 * @param task the task to process
 */
private void processJarTask(task) {
    task.configure {
        manifest {
            // noinspection GroovyAssignabilityCheck
            def attribute_map = [:]
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            attribute_map['FMLCorePluginContainsFMLMod'] = true
            attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
            attribute_map['FMLAT'] = 'gregification_at.cfg'
            attributes(attribute_map)
        }

        // exclude all files in src/api from being shipped in the jar
        // this prevents crashes in obfuscated environments
        file('src/api/').eachDirRecurse { dir ->
            exclude dir.name
        }
    }
}
